// <auto-generated />
using System;
using Help_desk_db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Help_desk_db.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190723225759_DbRelationshipsAdding")]
    partial class DbRelationshipsAdding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Help_desk_db.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CommentId");

                    b.Property<string>("Src")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CommentId")
                        .IsUnique();

                    b.ToTable("attachments");
                });

            modelBuilder.Entity("Help_desk_db.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("TicketId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("Help_desk_db.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("Help_desk_db.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress")
                        .IsRequired();

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("departments");
                });

            modelBuilder.Entity("Help_desk_db.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PriorityId");

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("Help_desk_db.GroupsPermission", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<int>("PermissionId");

                    b.Property<int>("Id");

                    b.Property<bool>("isDeleted");

                    b.HasKey("GroupId", "PermissionId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("groups_permissions");
                });

            modelBuilder.Entity("Help_desk_db.Invite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Token")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("invites");
                });

            modelBuilder.Entity("Help_desk_db.InvitesGroup", b =>
                {
                    b.Property<int>("InviteId");

                    b.Property<int>("GroupId");

                    b.Property<int>("Id");

                    b.Property<bool>("isDeleted");

                    b.HasKey("InviteId", "GroupId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("invites_groups");
                });

            modelBuilder.Entity("Help_desk_db.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("Help_desk_db.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("priorities");
                });

            modelBuilder.Entity("Help_desk_db.Statuse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("statuses");
                });

            modelBuilder.Entity("Help_desk_db.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("GroupId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("TemplatesCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.HasIndex("TemplatesCategoryId");

                    b.ToTable("templates");
                });

            modelBuilder.Entity("Help_desk_db.TemplatesCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<int>("ParentId");

                    b.HasKey("Id");

                    b.ToTable("templates_categories");
                });

            modelBuilder.Entity("Help_desk_db.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssigneeId");

                    b.Property<int>("AuthorId");

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DeadlineDate");

                    b.Property<int>("PriorityId");

                    b.Property<int>("StatusId");

                    b.Property<int>("TemplateId");

                    b.Property<string>("Title");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PriorityId")
                        .IsUnique();

                    b.HasIndex("StatusId")
                        .IsUnique();

                    b.HasIndex("TemplateId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("Help_desk_db.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Fname")
                        .IsRequired();

                    b.Property<string>("Lname")
                        .IsRequired();

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("Help_desk_db.UsersGroup", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("GroupId");

                    b.Property<int>("Id");

                    b.Property<bool>("isDeleted");

                    b.HasKey("UserId", "GroupId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("users_groups");
                });

            modelBuilder.Entity("Help_desk_db.Attachment", b =>
                {
                    b.HasOne("Help_desk_db.Comment", "Comment")
                        .WithOne("Attachment")
                        .HasForeignKey("Help_desk_db.Attachment", "CommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Help_desk_db.Comment", b =>
                {
                    b.HasOne("Help_desk_db.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Help_desk_db.Department", b =>
                {
                    b.HasOne("Help_desk_db.Company", "Company")
                        .WithOne("Department")
                        .HasForeignKey("Help_desk_db.Department", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Help_desk_db.GroupsPermission", b =>
                {
                    b.HasOne("Help_desk_db.Group", "Group")
                        .WithMany("GroupsPermissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Help_desk_db.Permission", "Permission")
                        .WithMany("GroupsPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Help_desk_db.Invite", b =>
                {
                    b.HasOne("Help_desk_db.Department", "Department")
                        .WithMany("Invite")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Help_desk_db.InvitesGroup", b =>
                {
                    b.HasOne("Help_desk_db.Group", "Group")
                        .WithMany("InvitesGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Help_desk_db.Invite", "Invite")
                        .WithMany("InvitesGroups")
                        .HasForeignKey("InviteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Help_desk_db.Template", b =>
                {
                    b.HasOne("Help_desk_db.Group", "Group")
                        .WithOne("Template")
                        .HasForeignKey("Help_desk_db.Template", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Help_desk_db.TemplatesCategory", "TemplatesCategory")
                        .WithMany("Templates")
                        .HasForeignKey("TemplatesCategoryId");
                });

            modelBuilder.Entity("Help_desk_db.Ticket", b =>
                {
                    b.HasOne("Help_desk_db.Priority", "Priority")
                        .WithOne("Ticket")
                        .HasForeignKey("Help_desk_db.Ticket", "PriorityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Help_desk_db.Statuse", "Statuse")
                        .WithOne("Ticket")
                        .HasForeignKey("Help_desk_db.Ticket", "StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Help_desk_db.Template", "Template")
                        .WithOne("Ticket")
                        .HasForeignKey("Help_desk_db.Ticket", "TemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Help_desk_db.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Help_desk_db.User", b =>
                {
                    b.HasOne("Help_desk_db.Department", "Department")
                        .WithOne("User")
                        .HasForeignKey("Help_desk_db.User", "DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Help_desk_db.UsersGroup", b =>
                {
                    b.HasOne("Help_desk_db.Group", "Group")
                        .WithMany("UsersGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Help_desk_db.User", "User")
                        .WithMany("UsersGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
